{
  "version": 3,
  "sources": ["../../thirdweb/src/utils/signatures/signature-to-hex.ts", "../../thirdweb/src/utils/signatures/sign-message.ts", "../../thirdweb/src/utils/signatures/sign-typed-data.ts"],
  "sourcesContent": ["import { secp256k1 } from \"@noble/curves/secp256k1\";\nimport type { Signature } from \"viem\";\nimport { type Hex, hexToBigInt } from \"../encoding/hex.js\";\n\n/**\n * Converts a signature to a hex string.\n * @param signature The signature to convert.\n * @returns The hex string representation of the signature.\n * @example\n * ```ts\n * import { signatureToHex } from \"thirdweb/utils\";\n *\n * const hex = signatureToHex({\n * r: toHex(\n * 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * ),\n * s: toHex(\n * 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * ),\n * v: 28n,\n * });\n *\n * console.log(hex);\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n * ```\n * @utils\n */\nexport function signatureToHex(signature: Signature): Hex {\n  const { r, s, v, yParity } = signature;\n  const yParity_ = (() => {\n    if (yParity === 0 || yParity === 1) return yParity;\n    if (v && (v === 27n || v === 28n || v >= 35n)) return v % 2n === 0n ? 1 : 0;\n    throw new Error(\"Invalid `v` or `yParity` value\");\n  })();\n  return `0x${new secp256k1.Signature(\n    hexToBigInt(r),\n    hexToBigInt(s),\n  ).toCompactHex()}${yParity_ === 0 ? \"1b\" : \"1c\"}`;\n}\n", "import type { Account } from \"../../wallets/interfaces/wallet.js\";\nimport type { Hex } from \"../encoding/hex.js\";\nimport { hashMessage } from \"../hashing/hashMessage.js\";\nimport type { Prettify } from \"../type-utils.js\";\nimport { sign } from \"./sign.js\";\nimport { signatureToHex } from \"./signature-to-hex.js\";\n\ntype Message = Prettify<\n  | string\n  | {\n      raw: Hex | Uint8Array;\n    }\n>;\nexport type SignMessageOptions = {\n  message: Message;\n  privateKey: Hex;\n};\n\n/**\n * Signs a string message with a given private key.\n * @param options The options for signing.\n * @param options.message The message to be signed as a string or object containing raw hex or bytes\n * @param options.privateKey The private key to be used\n * @returns The signature as a hex string\n * @example\n * ```ts\n * import { signMessage } from \"thirdweb/utils\";\n * signMessage({\n *   message: \"Hello, world!\",\n *   privateKey: \"0x...\",\n * });\n * ```\n * @utils\n */\nexport function signMessage({ message, privateKey }: SignMessageOptions): Hex;\n\n/**\n * Signs a string message with a given account.\n * @param options The options for signing.\n * @param options.message The message to be signed as a string or object containing raw hex or bytes\n * @param options.account The account to be used\n * @returns The signature as a hex string\n * @example\n * ```ts\n * import { signMessage } from \"thirdweb/utils\";\n * await signMessage({\n *   message: \"Hello, world!\",\n *   account\n * });\n * ```\n * @walletUtils\n */\nexport function signMessage({\n  message,\n  account,\n}: { message: Message; account: Account }): Promise<Hex>;\n\nexport function signMessage(\n  options: SignMessageOptions | { message: Message; account: Account },\n): Hex | Promise<Hex> {\n  if (\"privateKey\" in options) {\n    const { message, privateKey } = options;\n    const signature = sign({ hash: hashMessage(message), privateKey });\n    return signatureToHex(signature);\n  }\n  if (\"account\" in options) {\n    const { message, account } = options;\n    return account.signMessage({ message });\n  }\n  throw new Error(\"Either privateKey or account is required\");\n}\n", "import type { TypedData } from \"abitype\";\nimport { type TypedDataDefinition, hashTypedData } from \"viem\";\nimport type { Hex } from \"../encoding/hex.js\";\nimport { parseTypedData } from \"./helpers/parseTypedData.js\";\nimport { sign } from \"./sign.js\";\nimport { signatureToHex } from \"./signature-to-hex.js\";\n\nexport type SignTypedDataOptions<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | \"EIP712Domain\" = keyof typedData,\n> = TypedDataDefinition<typedData, primaryType> & {\n  privateKey: Hex;\n};\n\n/**\n * Signs a typed data object with a given private key according to EIP712.\n * @param options The typed data is passed within options alongside the private key\n * @param options.privateKey The private key to sign the typed data with\n * @returns The signature as a hex string\n * @example\n * ```ts\n * import { signTypedData } from \"thirdweb/utils\";\n * signTypedData({\n *   privateKey: \"0x...\",\n *   ...typedData\n * });\n * ```\n * @utils\n */\nexport function signTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | \"EIP712Domain\",\n>(options: SignTypedDataOptions<typedData, primaryType>): Hex {\n  const { privateKey, ...typedData } =\n    options as unknown as SignTypedDataOptions;\n\n  const parsedTypeData = parseTypedData(typedData);\n\n  const signature = sign({\n    hash: hashTypedData(parsedTypeData), // TODO: Implement native hashTypedData\n    privateKey,\n  });\n  return signatureToHex(signature);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AA2BM,SAAU,eAAe,WAAoB;AACjD,QAAM,EAAE,GAAG,GAAG,GAAG,QAAO,IAAK;AAC7B,QAAM,YAAY,MAAK;AACrB,QAAI,YAAY,KAAK,YAAY;AAAG,aAAO;AAC3C,QAAI,MAAM,MAAM,OAAO,MAAM,OAAO,KAAK;AAAM,aAAO,IAAI,OAAO,KAAK,IAAI;AAC1E,UAAM,IAAI,MAAM,gCAAgC;EAClD,GAAE;AACF,SAAO,KAAK,IAAI,UAAU,UACxB,YAAY,CAAC,GACb,YAAY,CAAC,CAAC,EACd,aAAY,CAAE,GAAG,aAAa,IAAI,OAAO,IAAI;AACjD;;;ACmBM,SAAU,YACd,SAAoE;AAEpE,MAAI,gBAAgB,SAAS;AAC3B,UAAM,EAAE,SAAS,WAAU,IAAK;AAChC,UAAM,YAAY,KAAK,EAAE,MAAM,YAAY,OAAO,GAAG,WAAU,CAAE;AACjE,WAAO,eAAe,SAAS;EACjC;AACA,MAAI,aAAa,SAAS;AACxB,UAAM,EAAE,SAAS,QAAO,IAAK;AAC7B,WAAO,QAAQ,YAAY,EAAE,QAAO,CAAE;EACxC;AACA,QAAM,IAAI,MAAM,0CAA0C;AAC5D;;;ACzCM,SAAU,cAGd,SAAqD;AACrD,QAAM,EAAE,YAAY,GAAG,UAAS,IAC9B;AAEF,QAAM,iBAAiB,eAAe,SAAS;AAE/C,QAAM,YAAY,KAAK;IACrB,MAAM,cAAc,cAAc;;IAClC;GACD;AACD,SAAO,eAAe,SAAS;AACjC;",
  "names": []
}
