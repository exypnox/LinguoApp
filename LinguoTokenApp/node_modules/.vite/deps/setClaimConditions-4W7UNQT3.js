import {
  once,
  prepareContractCall
} from "./chunk-FSNTYITZ.js";
import {
  detectMethod
} from "./chunk-CQDDA5CA.js";
import "./chunk-AJYCYNAD.js";
import {
  encodeAbiParameters
} from "./chunk-76WCYAWD.js";
import "./chunk-KJYLQJSK.js";
import "./chunk-Q3JOSKWE.js";
import "./chunk-7IZG4EP5.js";
import "./chunk-4ZSCZGTN.js";
import "./chunk-C4YSBPCB.js";
import "./chunk-PJWFC5K2.js";
import "./chunk-VIJQ2DKR.js";
import "./chunk-HBHEB2SD.js";
import "./chunk-GDDTQ4UI.js";
import "./chunk-WAYCTEWF.js";
import "./chunk-MCBKQZV4.js";
import "./chunk-DZWKJ2HW.js";
import "./chunk-YMTKIPCL.js";
import "./chunk-KMJ22NCU.js";
import "./chunk-ODQ2TGHS.js";
import "./chunk-PPP72TBL.js";
import "./chunk-MSFXBLHD.js";

// node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDrop1155/write/setClaimConditions.js
var FN_SELECTOR = "0x183718d1";
var FN_INPUTS = [
  {
    type: "uint256",
    name: "tokenId"
  },
  {
    type: "tuple[]",
    name: "phases",
    components: [
      {
        type: "uint256",
        name: "startTimestamp"
      },
      {
        type: "uint256",
        name: "maxClaimableSupply"
      },
      {
        type: "uint256",
        name: "supplyClaimed"
      },
      {
        type: "uint256",
        name: "quantityLimitPerWallet"
      },
      {
        type: "bytes32",
        name: "merkleRoot"
      },
      {
        type: "uint256",
        name: "pricePerToken"
      },
      {
        type: "address",
        name: "currency"
      },
      {
        type: "string",
        name: "metadata"
      }
    ]
  },
  {
    type: "bool",
    name: "resetClaimEligibility"
  }
];
var FN_OUTPUTS = [];
function isSetClaimConditionsSupported(availableSelectors) {
  return detectMethod({
    availableSelectors,
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS]
  });
}
function encodeSetClaimConditionsParams(options) {
  return encodeAbiParameters(FN_INPUTS, [
    options.tokenId,
    options.phases,
    options.resetClaimEligibility
  ]);
}
function encodeSetClaimConditions(options) {
  return FN_SELECTOR + encodeSetClaimConditionsParams(options).slice(2);
}
function setClaimConditions(options) {
  const asyncOptions = once(async () => {
    return "asyncParams" in options ? await options.asyncParams() : options;
  });
  return prepareContractCall({
    contract: options.contract,
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    params: async () => {
      const resolvedOptions = await asyncOptions();
      return [
        resolvedOptions.tokenId,
        resolvedOptions.phases,
        resolvedOptions.resetClaimEligibility
      ];
    },
    value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.value;
    },
    accessList: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.accessList;
    },
    gas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gas;
    },
    gasPrice: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gasPrice;
    },
    maxFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxFeePerGas;
    },
    maxPriorityFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxPriorityFeePerGas;
    },
    nonce: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.nonce;
    },
    extraGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.extraGas;
    },
    erc20Value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.erc20Value;
    }
  });
}
export {
  FN_SELECTOR,
  encodeSetClaimConditions,
  encodeSetClaimConditionsParams,
  isSetClaimConditionsSupported,
  setClaimConditions
};
//# sourceMappingURL=setClaimConditions-4W7UNQT3.js.map
