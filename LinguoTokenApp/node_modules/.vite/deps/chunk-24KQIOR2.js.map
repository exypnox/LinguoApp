{
  "version": 3,
  "sources": ["../../thirdweb/src/utils/bigint.ts"],
  "sourcesContent": ["import { uint8ArrayToHex } from \"./encoding/hex.js\";\n\n/**\n * Returns the minimum of two BigInt values.\n * @param a - The first BigInt value.\n * @param b - The second BigInt value.\n * @returns The smaller of the two BigInt values.\n * @utils\n * @example\n * ```ts\n * min(1n, 2n)\n * // 1n\n */\nexport function min(a: bigint, b: bigint) {\n  return a < b ? a : b;\n}\n\n/**\n * Returns the maximum of two BigInt values.\n * @param a - The first BigInt value.\n * @param b - The second BigInt value.\n * @returns The larger of the two BigInt values.\n * @utils\n * @example\n * ```ts\n * max(1n, 2n)\n * // 2n\n */\nexport function max(a: bigint, b: bigint) {\n  return a > b ? a : b;\n}\n\n/**\n * Provides error checking on string or number bigint inputs.\n * @param value - A possibly integer-like string, number, or bigint.\n * @returns The bigint representation of the input.\n * @example\n * ```ts\n * toBigInt(\"2\")\n * // 2n\n */\nexport function toBigInt(value: string | number | bigint | Uint8Array): bigint {\n  if (\n    [\"string\", \"number\"].includes(typeof value) &&\n    !Number.isInteger(Number(value))\n  ) {\n    throw new Error(\n      `Expected value to be an integer to convert to a bigint, got ${value} of type ${typeof value}`,\n    );\n  }\n\n  if (value instanceof Uint8Array) {\n    return BigInt(uint8ArrayToHex(value));\n  }\n\n  return BigInt(value);\n}\n"],
  "mappings": ";;;;;AAaM,SAAU,IAAI,GAAW,GAAS;AACtC,SAAO,IAAI,IAAI,IAAI;AACrB;AAaM,SAAU,IAAI,GAAW,GAAS;AACtC,SAAO,IAAI,IAAI,IAAI;AACrB;AAWM,SAAU,SAAS,OAA4C;AACnE,MACE,CAAC,UAAU,QAAQ,EAAE,SAAS,OAAO,KAAK,KAC1C,CAAC,OAAO,UAAU,OAAO,KAAK,CAAC,GAC/B;AACA,UAAM,IAAI,MACR,+DAA+D,KAAK,YAAY,OAAO,KAAK,EAAE;EAElG;AAEA,MAAI,iBAAiB,YAAY;AAC/B,WAAO,OAAO,gBAAgB,KAAK,CAAC;EACtC;AAEA,SAAO,OAAO,KAAK;AACrB;",
  "names": []
}
