import {
  sendBatchTransaction
} from "./chunk-TDFWW666.js";
import {
  sendAndConfirmTransaction
} from "./chunk-J4UKGIML.js";
import {
  eth_getTransactionReceipt
} from "./chunk-OLVV2SZ2.js";
import "./chunk-QWTK625L.js";
import "./chunk-MAIJ6UKZ.js";
import "./chunk-HH2NFLAA.js";
import "./chunk-FVFXS5GY.js";
import "./chunk-352E3LEE.js";
import "./chunk-NVBBE2QQ.js";
import "./chunk-6ZAO22CU.js";
import "./chunk-KLXH3ZM6.js";
import {
  randomBytesHex
} from "./chunk-OY6VNEJL.js";
import "./chunk-KJYLQJSK.js";
import "./chunk-Q3JOSKWE.js";
import {
  getRpcClient
} from "./chunk-5PURIJGG.js";
import "./chunk-7IZG4EP5.js";
import "./chunk-VIJQ2DKR.js";
import "./chunk-HBHEB2SD.js";
import "./chunk-GDDTQ4UI.js";
import "./chunk-HAADYJEF.js";
import "./chunk-MCBKQZV4.js";
import "./chunk-DZWKJ2HW.js";
import "./chunk-YMTKIPCL.js";
import "./chunk-KMJ22NCU.js";
import "./chunk-ODQ2TGHS.js";
import "./chunk-TQTA6FSB.js";
import "./chunk-CT4S5XSC.js";
import "./chunk-F7BKMWKP.js";
import "./chunk-3OXDSLPJ.js";
import {
  LruMap
} from "./chunk-PPP72TBL.js";
import "./chunk-MSFXBLHD.js";

// node_modules/thirdweb/dist/esm/wallets/in-app/core/eip5972/in-app-wallet-calls.js
var bundlesToTransactions = new LruMap(1e3);
async function inAppWalletSendCalls(args) {
  const { account, calls } = args;
  const hashes = [];
  const bundleId = randomBytesHex(65);
  bundlesToTransactions.set(bundleId, hashes);
  if (account.sendBatchTransaction) {
    const receipt = await sendBatchTransaction({
      account,
      transactions: calls
    });
    hashes.push(receipt.transactionHash);
    bundlesToTransactions.set(bundleId, hashes);
  } else {
    for (const tx of calls) {
      const receipt = await sendAndConfirmTransaction({
        account,
        transaction: tx
      });
      hashes.push(receipt.transactionHash);
      bundlesToTransactions.set(bundleId, hashes);
    }
  }
  return bundleId;
}
async function inAppWalletGetCallsStatus(args) {
  const { wallet, client, bundleId } = args;
  const chain = wallet.getChain();
  if (!chain) {
    throw new Error("Failed to get calls status, no active chain found");
  }
  const bundle = bundlesToTransactions.get(bundleId);
  if (!bundle) {
    throw new Error("Failed to get calls status, unknown bundle id");
  }
  const request = getRpcClient({ client, chain });
  let status = "CONFIRMED";
  const receipts = await Promise.all(bundle.map((hash) => eth_getTransactionReceipt(request, { hash }).then((receipt) => ({
    logs: receipt.logs.map((l) => ({
      address: l.address,
      data: l.data,
      topics: l.topics
    })),
    status: receipt.status,
    blockHash: receipt.blockHash,
    blockNumber: receipt.blockNumber,
    gasUsed: receipt.gasUsed,
    transactionHash: receipt.transactionHash
  })).catch(() => {
    status = "PENDING";
    return null;
  })));
  return {
    status,
    receipts: receipts.filter((r) => r !== null)
    // ts 5.5 please come we need you
  };
}
export {
  inAppWalletGetCallsStatus,
  inAppWalletSendCalls
};
//# sourceMappingURL=in-app-wallet-calls-OUYSQITB.js.map
