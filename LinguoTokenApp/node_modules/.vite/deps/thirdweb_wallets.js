import {
  createWallet,
  ecosystemWallet,
  inAppWallet,
  walletConnect
} from "./chunk-QSV2COCK.js";
import {
  getWalletBalance
} from "./chunk-EBZTHMWT.js";
import {
  DefaultWalletConnectRequestHandlers,
  createWalletConnectClient,
  createWalletConnectSession,
  disconnectWalletConnectSession,
  getActiveWalletConnectSessions
} from "./chunk-URTIO2XR.js";
import "./chunk-BUGZQU6J.js";
import "./chunk-H73ZJMBO.js";
import "./chunk-ENJDZBMF.js";
import {
  getWalletInfo
} from "./chunk-Q35Y75F4.js";
import "./chunk-67YIWUOQ.js";
import {
  authenticate,
  authenticateWithRedirect,
  getProfiles,
  getUserEmail,
  getUserPhoneNumber,
  linkProfile,
  preAuthenticate
} from "./chunk-GPAPZX5V.js";
import "./chunk-4R6CAGL5.js";
import "./chunk-57DFWRZ3.js";
import "./chunk-FUW7UPWG.js";
import {
  injectedProvider
} from "./chunk-NHH5L32Z.js";
import {
  smartWallet
} from "./chunk-AUVKPJDE.js";
import {
  createWalletEmitter
} from "./chunk-2S6BBZVH.js";
import "./chunk-SRFK4TG3.js";
import "./chunk-4BC3YJ6S.js";
import "./chunk-57BDDLER.js";
import "./chunk-5HJ2UXO5.js";
import "./chunk-LZH3KM55.js";
import "./chunk-Y3VUZTEO.js";
import "./chunk-LWBFBP2R.js";
import {
  signMessage,
  signTypedData
} from "./chunk-M37VZ3HW.js";
import "./chunk-NUMAW4ZH.js";
import "./chunk-QQQWUGLR.js";
import "./chunk-BRUHTZMA.js";
import "./chunk-PH5FAAQQ.js";
import {
  getUser,
  signTransaction
} from "./chunk-KB55DUWC.js";
import "./chunk-63PYJADF.js";
import "./chunk-4SWHQGAJ.js";
import "./chunk-MAIJ6UKZ.js";
import "./chunk-HH2NFLAA.js";
import {
  eth_sendRawTransaction
} from "./chunk-CMXLKATA.js";
import "./chunk-FVFXS5GY.js";
import "./chunk-352E3LEE.js";
import "./chunk-NVBBE2QQ.js";
import "./chunk-6ZAO22CU.js";
import "./chunk-KLXH3ZM6.js";
import "./chunk-XHHJLHAT.js";
import "./chunk-KJYLQJSK.js";
import "./chunk-V4R6W4TB.js";
import "./chunk-Q3JOSKWE.js";
import {
  getRpcClient
} from "./chunk-5PURIJGG.js";
import "./chunk-7IZG4EP5.js";
import "./chunk-4ZSCZGTN.js";
import "./chunk-C4YSBPCB.js";
import "./chunk-PJWFC5K2.js";
import {
  publicKeyToAddress
} from "./chunk-VIJQ2DKR.js";
import {
  toHex
} from "./chunk-HBHEB2SD.js";
import "./chunk-GDDTQ4UI.js";
import "./chunk-HAADYJEF.js";
import "./chunk-WAYCTEWF.js";
import {
  secp256k1
} from "./chunk-MCBKQZV4.js";
import "./chunk-DZWKJ2HW.js";
import "./chunk-YMTKIPCL.js";
import "./chunk-KMJ22NCU.js";
import "./chunk-ODQ2TGHS.js";
import {
  getCachedChain,
  getCachedChainIfExists
} from "./chunk-TQTA6FSB.js";
import "./chunk-CT4S5XSC.js";
import "./chunk-F7BKMWKP.js";
import "./chunk-3OXDSLPJ.js";
import "./chunk-PPP72TBL.js";
import "./chunk-MSFXBLHD.js";

// node_modules/thirdweb/dist/esm/wallets/private-key.js
function privateKeyToAccount(options) {
  const { client } = options;
  const privateKey = `0x${options.privateKey.replace(/^0x/, "")}`;
  const publicKey = toHex(secp256k1.getPublicKey(privateKey.slice(2), false));
  const address = publicKeyToAddress(publicKey);
  const account = {
    address,
    sendTransaction: async (tx) => {
      const rpcRequest = getRpcClient({
        client,
        chain: getCachedChain(tx.chainId)
      });
      const signedTx = signTransaction({
        transaction: tx,
        privateKey
      });
      const transactionHash = await eth_sendRawTransaction(rpcRequest, signedTx);
      return {
        transactionHash
      };
    },
    signMessage: async ({ message }) => {
      return signMessage({
        message,
        privateKey
      });
    },
    signTypedData: async (_typedData) => {
      return signTypedData({
        ..._typedData,
        privateKey
      });
    },
    signTransaction: async (tx) => {
      return signTransaction({
        transaction: tx,
        privateKey
      });
    }
  };
  return account;
}

// node_modules/thirdweb/dist/esm/wallets/utils/generateAccount.js
async function generateAccount(options) {
  const privateKey = toHex(secp256k1.utils.randomPrivateKey());
  return privateKeyToAccount({ privateKey, client: options.client });
}

// node_modules/thirdweb/dist/esm/wallets/getAllWalletsList.js
async function getAllWalletsList() {
  return (await import("./wallet-infos-MZXB7DA6.js")).default;
}

// node_modules/thirdweb/dist/esm/adapters/wallet-adapter.js
function createWalletAdapter(options) {
  const emitter = createWalletEmitter();
  let _chain = options.chain;
  return {
    id: "adapter",
    subscribe: emitter.subscribe,
    connect: async () => {
      emitter.emit("onConnect", options);
      return options.adaptedAccount;
    },
    autoConnect: async () => {
      emitter.emit("onConnect", options);
      return options.adaptedAccount;
    },
    disconnect: async () => {
      await options.onDisconnect();
      emitter.emit("disconnect", void 0);
    },
    getAccount() {
      return options.adaptedAccount;
    },
    getChain() {
      const cachedChain = getCachedChainIfExists(_chain.id);
      _chain = cachedChain || _chain;
      return _chain;
    },
    getConfig() {
      return options;
    },
    switchChain: async (chain) => {
      await options.switchChain(chain);
      _chain = chain;
      emitter.emit("chainChanged", chain);
    }
  };
}
export {
  DefaultWalletConnectRequestHandlers,
  authenticate,
  authenticateWithRedirect,
  createWallet,
  createWalletAdapter,
  createWalletConnectClient,
  createWalletConnectSession,
  disconnectWalletConnectSession,
  ecosystemWallet,
  inAppWallet as embeddedWallet,
  generateAccount,
  getActiveWalletConnectSessions,
  getAllWalletsList,
  getProfiles,
  getUser,
  getUserEmail,
  getUserPhoneNumber,
  getWalletBalance,
  getWalletInfo,
  inAppWallet,
  injectedProvider,
  linkProfile,
  preAuthenticate,
  privateKeyToAccount as privateKeyAccount,
  privateKeyToAccount,
  smartWallet,
  walletConnect
};
//# sourceMappingURL=thirdweb_wallets.js.map
