{
  "version": 3,
  "sources": ["../../thirdweb/src/extensions/erc20/__generated__/IERC20/write/transfer.ts", "../../thirdweb/src/extensions/erc20/write/transfer.ts"],
  "sourcesContent": ["import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport type {\n  BaseTransactionOptions,\n  WithOverrides,\n} from \"../../../../../transaction/types.js\";\nimport { prepareContractCall } from \"../../../../../transaction/prepare-contract-call.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { once } from \"../../../../../utils/promise/once.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\n/**\n * Represents the parameters for the \"transfer\" function.\n */\nexport type TransferParams = WithOverrides<{\n  to: AbiParameterToPrimitiveType<{ type: \"address\"; name: \"to\" }>;\n  value: AbiParameterToPrimitiveType<{ type: \"uint256\"; name: \"value\" }>;\n}>;\n\nexport const FN_SELECTOR = \"0xa9059cbb\" as const;\nconst FN_INPUTS = [\n  {\n    type: \"address\",\n    name: \"to\",\n  },\n  {\n    type: \"uint256\",\n    name: \"value\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"bool\",\n  },\n] as const;\n\n/**\n * Checks if the `transfer` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `transfer` method is supported.\n * @extension ERC20\n * @example\n * ```ts\n * import { isTransferSupported } from \"thirdweb/extensions/erc20\";\n *\n * const supported = isTransferSupported([\"0x...\"]);\n * ```\n */\nexport function isTransferSupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"transfer\" function.\n * @param options - The options for the transfer function.\n * @returns The encoded ABI parameters.\n * @extension ERC20\n * @example\n * ```ts\n * import { encodeTransferParams } from \"thirdweb/extensions/erc20\";\n * const result = encodeTransferParams({\n *  to: ...,\n *  value: ...,\n * });\n * ```\n */\nexport function encodeTransferParams(options: TransferParams) {\n  return encodeAbiParameters(FN_INPUTS, [options.to, options.value]);\n}\n\n/**\n * Encodes the \"transfer\" function into a Hex string with its parameters.\n * @param options - The options for the transfer function.\n * @returns The encoded hexadecimal string.\n * @extension ERC20\n * @example\n * ```ts\n * import { encodeTransfer } from \"thirdweb/extensions/erc20\";\n * const result = encodeTransfer({\n *  to: ...,\n *  value: ...,\n * });\n * ```\n */\nexport function encodeTransfer(options: TransferParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeTransferParams(options).slice(2)) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Prepares a transaction to call the \"transfer\" function on the contract.\n * @param options - The options for the \"transfer\" function.\n * @returns A prepared transaction object.\n * @extension ERC20\n * @example\n * ```ts\n * import { sendTransaction } from \"thirdweb\";\n * import { transfer } from \"thirdweb/extensions/erc20\";\n *\n * const transaction = transfer({\n *  contract,\n *  to: ...,\n *  value: ...,\n *  overrides: {\n *    ...\n *  }\n * });\n *\n * // Send the transaction\n * await sendTransaction({ transaction, account });\n * ```\n */\nexport function transfer(\n  options: BaseTransactionOptions<\n    | TransferParams\n    | {\n        asyncParams: () => Promise<TransferParams>;\n      }\n  >,\n) {\n  const asyncOptions = once(async () => {\n    return \"asyncParams\" in options ? await options.asyncParams() : options;\n  });\n\n  return prepareContractCall({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: async () => {\n      const resolvedOptions = await asyncOptions();\n      return [resolvedOptions.to, resolvedOptions.value] as const;\n    },\n    value: async () => (await asyncOptions()).overrides?.value,\n    accessList: async () => (await asyncOptions()).overrides?.accessList,\n    gas: async () => (await asyncOptions()).overrides?.gas,\n    gasPrice: async () => (await asyncOptions()).overrides?.gasPrice,\n    maxFeePerGas: async () => (await asyncOptions()).overrides?.maxFeePerGas,\n    maxPriorityFeePerGas: async () =>\n      (await asyncOptions()).overrides?.maxPriorityFeePerGas,\n    nonce: async () => (await asyncOptions()).overrides?.nonce,\n    extraGas: async () => (await asyncOptions()).overrides?.extraGas,\n    erc20Value: async () => (await asyncOptions()).overrides?.erc20Value,\n  });\n}\n", "import type {\n  BaseTransactionOptions,\n  WithOverrides,\n} from \"../../../transaction/types.js\";\nimport type { Prettify } from \"../../../utils/type-utils.js\";\nimport { toUnits } from \"../../../utils/units.js\";\nimport { transfer as generatedTransfer } from \"../__generated__/IERC20/write/transfer.js\";\n\n/**\n * Represents the parameters for a transfer operation.\n * @extension ERC20\n */\nexport type TransferParams = Prettify<\n  WithOverrides<\n    { to: string } & (\n      | {\n          amount: number | string;\n        }\n      | {\n          amountWei: bigint;\n        }\n    )\n  >\n>;\n\n/**\n * Transfers ERC20 tokens from the sender's address to the specified recipient address.\n * @param options - The options for the transfer transaction.\n * @returns A promise that resolves to the prepared transaction.\n * @extension ERC20\n * @example\n * ```ts\n * import { transfer } from \"thirdweb/extensions/erc20\";\n * import { sendTransaction } from \"thirdweb\";\n *\n * const transaction = transfer({\n *  contract,\n *  to: \"0x...\",\n *  amount: 100,\n * });\n *\n * await sendTransaction({ transaction, account });\n * ```\n */\nexport function transfer(options: BaseTransactionOptions<TransferParams>) {\n  return generatedTransfer({\n    contract: options.contract,\n    asyncParams: async () => {\n      let amount: bigint;\n      if (\"amount\" in options) {\n        // if we need to parse the amount from ether to gwei then we pull in the decimals extension\n        const { decimals } = await import(\"../read/decimals.js\");\n        // if this fails we fall back to `18` decimals\n        const d = await decimals(options).catch(() => 18);\n        // turn ether into gwei\n        amount = toUnits(options.amount.toString(), d);\n      } else {\n        amount = options.amountWei;\n      }\n      return {\n        to: options.to,\n        value: amount,\n        overrides: {\n          erc20Value: {\n            amountWei: amount,\n            tokenAddress: options.contract.address,\n          },\n          ...options.overrides,\n        },\n      } as const;\n    },\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAkBO,IAAM,cAAc;AAC3B,IAAM,YAAY;EAChB;IACE,MAAM;IACN,MAAM;;EAER;IACE,MAAM;IACN,MAAM;;;AAGV,IAAM,aAAa;EACjB;IACE,MAAM;;;AAgBJ,SAAU,oBAAoB,oBAA4B;AAC9D,SAAO,aAAa;IAClB;IACA,QAAQ,CAAC,aAAa,WAAW,UAAU;GAC5C;AACH;AAgBM,SAAU,qBAAqB,SAAuB;AAC1D,SAAO,oBAAoB,WAAW,CAAC,QAAQ,IAAI,QAAQ,KAAK,CAAC;AACnE;AAgBM,SAAU,eAAe,SAAuB;AAGpD,SAAQ,cACN,qBAAqB,OAAO,EAAE,MAAM,CAAC;AACzC;AAyBM,SAAU,SACd,SAKC;AAED,QAAM,eAAe,KAAK,YAAW;AACnC,WAAO,iBAAiB,UAAU,MAAM,QAAQ,YAAW,IAAK;EAClE,CAAC;AAED,SAAO,oBAAoB;IACzB,UAAU,QAAQ;IAClB,QAAQ,CAAC,aAAa,WAAW,UAAU;IAC3C,QAAQ,YAAW;AACjB,YAAM,kBAAkB,MAAM,aAAY;AAC1C,aAAO,CAAC,gBAAgB,IAAI,gBAAgB,KAAK;IACnD;IACA,OAAO,YAAS;AAlIpB;AAkIwB,0BAAM,aAAY,GAAI,cAAtB,mBAAiC;;IACrD,YAAY,YAAS;AAnIzB;AAmI6B,0BAAM,aAAY,GAAI,cAAtB,mBAAiC;;IAC1D,KAAK,YAAS;AApIlB;AAoIsB,0BAAM,aAAY,GAAI,cAAtB,mBAAiC;;IACnD,UAAU,YAAS;AArIvB;AAqI2B,0BAAM,aAAY,GAAI,cAAtB,mBAAiC;;IACxD,cAAc,YAAS;AAtI3B;AAsI+B,0BAAM,aAAY,GAAI,cAAtB,mBAAiC;;IAC5D,sBAAsB,YAAS;AAvInC;AAwIO,0BAAM,aAAY,GAAI,cAAtB,mBAAiC;;IACpC,OAAO,YAAS;AAzIpB;AAyIwB,0BAAM,aAAY,GAAI,cAAtB,mBAAiC;;IACrD,UAAU,YAAS;AA1IvB;AA0I2B,0BAAM,aAAY,GAAI,cAAtB,mBAAiC;;IACxD,YAAY,YAAS;AA3IzB;AA2I6B,0BAAM,aAAY,GAAI,cAAtB,mBAAiC;;GAC3D;AACH;;;ACtGM,SAAUA,UAAS,SAA+C;AACtE,SAAO,SAAkB;IACvB,UAAU,QAAQ;IAClB,aAAa,YAAW;AACtB,UAAI;AACJ,UAAI,YAAY,SAAS;AAEvB,cAAM,EAAE,SAAQ,IAAK,MAAM,OAAO,wBAAqB;AAEvD,cAAM,IAAI,MAAM,SAAS,OAAO,EAAE,MAAM,MAAM,EAAE;AAEhD,iBAAS,QAAQ,QAAQ,OAAO,SAAQ,GAAI,CAAC;MAC/C,OAAO;AACL,iBAAS,QAAQ;MACnB;AACA,aAAO;QACL,IAAI,QAAQ;QACZ,OAAO;QACP,WAAW;UACT,YAAY;YACV,WAAW;YACX,cAAc,QAAQ,SAAS;;UAEjC,GAAG,QAAQ;;;IAGjB;GACD;AACH;",
  "names": ["transfer"]
}
