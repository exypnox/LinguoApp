{
  "version": 3,
  "sources": ["../../thirdweb/src/utils/signatures/sign.ts"],
  "sourcesContent": ["import { secp256k1 } from \"@noble/curves/secp256k1\";\nimport type { Signature } from \"viem\";\n\nimport { type Hex, toHex } from \"../encoding/hex.js\";\n\n/**\n * Options for signing a transaction hash.\n */\nexport type SignOptions = {\n  hash: Hex;\n  privateKey: Hex;\n};\n\n/**\n * Generates the signature for the provided transaction hash.\n * @param options - The options for signing.\n * @param options.hash - The hash to be signed.\n * @param options.privateKey - The private key to sign the hash with.\n * @returns The transaction signature.\n * @example\n * ```ts\n * import { sign } from \"thirdweb/utils\";\n *\n * const signature = sign({\n *   hash: \"0x\",\n *   privateKey: \"0x\",\n * });\n * ```\n * @utils\n */\nexport function sign({ hash, privateKey }: SignOptions): Signature {\n  const { r, s, recovery } = secp256k1.sign(hash.slice(2), privateKey.slice(2));\n  return {\n    r: toHex(r, { size: 32 }),\n    s: toHex(s, { size: 32 }),\n    v: recovery ? 28n : 27n,\n    yParity: recovery,\n  };\n}\n"],
  "mappings": ";;;;;;;;AA8BM,SAAU,KAAK,EAAE,MAAM,WAAU,GAAe;AACpD,QAAM,EAAE,GAAG,GAAG,SAAQ,IAAK,UAAU,KAAK,KAAK,MAAM,CAAC,GAAG,WAAW,MAAM,CAAC,CAAC;AAC5E,SAAO;IACL,GAAG,MAAM,GAAG,EAAE,MAAM,GAAE,CAAE;IACxB,GAAG,MAAM,GAAG,EAAE,MAAM,GAAE,CAAE;IACxB,GAAG,WAAW,MAAM;IACpB,SAAS;;AAEb;",
  "names": []
}
